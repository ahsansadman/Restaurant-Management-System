# Generated by Django 3.1.7 on 2021-04-14 21:19

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Catagory',
            fields=[
                ('title', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='Title')),
                ('is_indoor', models.BooleanField(default=False, verbose_name='Indoor')),
                ('is_outdoor', models.BooleanField(default=False, verbose_name='Outdoor')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CookingStation',
            fields=[
                ('station_name', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='Station Name')),
            ],
            options={
                'ordering': ['station_name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('description', models.TextField(max_length=256)),
                ('price', models.IntegerField(verbose_name='Price')),
                ('rating', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=50, verbose_name='Rating')),
                ('image', models.ImageField(upload_to='foodImages')),
                ('catagory_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='restaurant.catagory', verbose_name='Catagory')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=128, verbose_name='Customer Name')),
                ('server_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Server Name')),
                ('table_no', models.PositiveIntegerField()),
                ('is_pending', models.BooleanField(default=True)),
                ('is_prepared', models.BooleanField(default=False)),
                ('discount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Discount')),
                ('vat', models.PositiveIntegerField(verbose_name='Vat')),
                ('service_charge', models.PositiveIntegerField(verbose_name='Service Charge')),
                ('bill', models.PositiveIntegerField(verbose_name='Bill')),
                ('order_time', models.DateTimeField(auto_now_add=True, verbose_name='Order Time')),
            ],
            options={
                'ordering': ['order_time'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('menu_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='restaurant.menuitem', verbose_name='Menu Item')),
            ],
            options={
                'ordering': ['menu_item'],
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('type', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='Type')),
            ],
            options={
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='RecipeItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(help_text='in grams', verbose_name='Amount')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_item', to='inventory.inventoryitem', verbose_name='Ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe', to='restaurant.recipe', verbose_name='Recipe')),
            ],
            options={
                'ordering': ['recipe'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=128, verbose_name='Item Name')),
                ('catagory', models.CharField(max_length=128, verbose_name='Catagory')),
                ('cooking_station', models.CharField(max_length=128, verbose_name='Cooking Station')),
                ('price', models.PositiveIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('is_prepared', models.BooleanField(default=False)),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_items', to='restaurant.order', verbose_name='Order ID')),
            ],
            options={
                'ordering': ['catagory'],
            },
        ),
        migrations.AddField(
            model_name='catagory',
            name='cooking_station',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='catagories', to='restaurant.cookingstation', verbose_name='Cooking Station'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='username')),
                ('nid', models.PositiveIntegerField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('address1', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 1')),
                ('address2', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 2')),
                ('zip_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='Postal Code')),
                ('city', models.CharField(blank=True, max_length=1024, null=True, verbose_name='City')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('mobile_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+(?:[0-9]‚óè?){6,14}[0-9]$')], verbose_name='Mobile phone')),
                ('additional_information', models.CharField(blank=True, max_length=4096, null=True, verbose_name='Additional information')),
                ('photo', models.ImageField(default='photos/default-user-avatar.png', upload_to='Employee photos/', verbose_name='Photo')),
                ('cooking_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='restaurant.cookingstation', verbose_name='Cooking Station')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('user_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='restaurant.usertype', verbose_name='User Type')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
